-- 1. Merge sort

-- Deal a list into two (almost) equal-sizes lists by alternating elements
-- For example, deal [1,2,3,4,5,6,7] = ([1,3,5,7], [2,4,6])
-- and          deal   [2,3,4,5,6,7] = ([2,4,6], [3,5,7])
-- Hint: notice what's happening between the answers to deal [2..7] and
-- deal (1:[2..7]) above to get an idea of how to approach the recursion

{-
deal :: [a] -> ([a],[a])
deal [] = undefined
deal (x:xs) = let (ys,zs) = deal xs
              in undefined
        -}
deal :: [a] -> ([a],[a])
deal [] = ([], [])
deal (x:xs) = let (ys, zs) = deal xs
              in (x:zs, ys)
                {-
                ghci> deal [1,2,3,4,5,6,7]
              ([1,3,5,7],[2,4,6])
              ghci> deal (1:[2..7])
              ([1,3,5,7],[2,4,6])
              ghci> deal [2..7]
              ([2,4,6],[3,5,7])
                -}

-- Now implement merge and mergesort (ms), and test with some
-- scrambled lists to gain confidence that your code is correct
{-
merge :: Ord a => [a] -> [a] -> [a]
merge [] ys = undefined
merge xs [] = undefined
merge (x:xs) (y:ys)
  | x <= y = undefined
  | x > y  = undefined

ms :: Ord a => [a] -> [a]
ms [] = []
ms [x] = [x]
ms xs = undefined  -- general case: deal, recursive call, merge
-}

{-
merge :: Ord a => [a] -> [a] -> [a]
merge [] ys = ys               -- if first list is empty, return the second list
merge xs [] = xs               -- if second list is empty, return the first list
merge (x:xs) (y:ys)
  | x <= y    = x : merge xs (y:ys) -- if x is less than or equal to y, put x in the merged list and continue merging
  | otherwise = y : merge (x:xs) ys -- otherwise, put y in the merged list and continue merging

ms :: Ord a => [a] -> [a]
ms [] = []
ms [x] = [x]
ms xs = let (firstHalf, secondHalf) = splitAt (length xs `div` 2) xs  -- split the list into two halves
        in merge (ms firstHalf) (ms secondHalf)  -- recursively sort both halves and then merge them
       -}
        {-
        ghci> merge [1,35,6,4] [3,5,3,2]
        [1,3,5,3,2,35,6,4]
        the problem with this is that the rest of the first list
        is just added to the updated list without any comparing
        so the merge function expects two sorted lists its input
        and makes a sorted list as output, which makes sense. 
        ms
        -}

        

-- 2. A backward list data structure 

-- Back Lists: Lists where elements are added to the back ("snoc" == rev "cons")
-- For example, the list [1,2,3] is represented as Snoc (Snoc (Snoc Nil 1) 2) 3
data BList a = Nil | Snoc (BList a) a deriving (Show,Eq)

-- Add an element to the beginning of a BList, like (:) does
cons :: a -> BList a -> BList a
cons x Nil = Snoc Nil x
cons x (Snoc bl y) = Snoc (cons x bl) y

{-
    ghci> cons 1 Nil
    Snoc Nil 1
So for this one, we're testing with an empty Blist. This is simple 
because we're just adding one element to the end. We're Snoccing
an elemend to the end(1). 
    ghci> cons 2 (cons 1 Nil)
    Snoc (Snoc Nil 2) 1
For this one, we're nexting cons and adding 1 to an empty Blist,
then adding 2 to the beginning of that list. 
    ghci> let elements = Snoc (Snoc (Snoc Nil 1) 2) 3
    ghci> cons 0 elements
    Snoc (Snoc (Snoc (Snoc Nil 0) 1) 2) 3
so what's happening here is we're making a Blist that's [1,2,3]
but built backwards using Snoc. So elements is the name of our Blist.
We're basically making sure that cons is adding an element to 
the beginning of a Blist. 

-}


-- Convert a usual list into a BList (hint: use cons in the recursive case)
toBList :: [a] -> BList a
toBList [] = Nil
toBList (x:xs) = cons x (toBList xs)
{-
so we have our toBList function and as we can see it takes a 
regular array and turns it into a Blist
ghci> toBList [1,2,3,4]
Snoc (Snoc (Snoc (Snoc Nil 1) 2) 3) 4
-}
-- Add an element to the end of an ordinary list
snoc :: [a] -> a -> [a]
snoc [] y = [y]
snoc (x:xs) y = x : snoc xs y
{-
ghci> snoc [1,2,3] 4
[1,2,3,4]
so if by ordinary list you mean [1,2,3] then scoc adds the element
into the list. 

-}
-- Convert a BList into an ordinary list (hint: use snoc in the recursive case)
fromBList :: BList a -> [a]
fromBList Nil = []
fromBList (Snoc bl x) = snoc (fromBList bl) x
{-
ghci> let blist = Snoc (Snoc (Snoc Nil 1) 2) 3
ghci> fromBList blist
[1,2,3]
-}

-- 3. A binary tree data structure
data Tree a = Empty | Node a (Tree a) (Tree a) deriving (Show, Eq)

-- Count number of Empty's in the tree
num_empties :: Tree a -> Int
num_empties Empty = 1
num_empties (Node _ left right) = num_empties left + num_empties right 
oneNode = Node 5 Empty Empty
fourNodes = Node 5 (Node 3 Empty Empty) (Node 9 Empty Empty)
{-
ghci> num_empties oneNode
2
--we used a tree with a single node and the children being empty
ghci> num_empties fourNodes
4
-}

-- Count number of Node's in the tree
num_nodes :: Tree a -> Int
num_nodes Empty = 0
num_nodes (Node _ left right) = 1 + num_nodes left + num_nodes right
unoNode = Node 1 Empty Empty
tresNode = Node 100 (Node 5 Empty Empty) (Node 15 Empty Empty)
{-
ghci> num_nodes unoNode
1
ghci> num_nodes tresNode
3
-}
-- Insert a new node in the leftmost spot in the tree
insert_left :: a -> Tree a -> Tree a
insert_left val Empty = Node val Empty Empty
insert_left val (Node a left right) = Node a (insert_left val left) right
empTREE = Node 7 (Node 6 Empty Empty) Empty
{-
ghci> insert_left 5 empTREE
Node 7 (Node 6 (Node 5 Empty Empty) Empty) Empty
as we can see insert_val replaces a value and creates a new node
-}
-- Insert a new node in the rightmost spot in the tree
insert_right :: a -> Tree a -> Tree a
insert_right val Empty = Node val Empty Empty
insert_right val (Node x left Empty) = Node x left (Node val Empty Empty)
insert_right val (Node x left right) = Node x left (insert_right val right)
rightTREE = Node 2 (Node 2 Empty(Node 4 Empty Empty))(Node 5 Empty Empty)
{-
ghci> insert_right 8 rightTREE
Node 2 (Node 2 Empty (Node 4 Empty Empty))
 (Node 5 Empty (Node 8 Empty Empty))
-}

-- Add up all the node values in a tree of numbers
sum_nodes :: Num a => Tree a -> a
sum_nodes Empty = 0
sum_nodes (Node value left right) = value + sum_nodes left + sum_nodes right
sumTREE = Node 5 
    (Node 2 
    (Node 1 Empty Empty) 
    (Node 3 Empty Empty)) 
    (Node 7 
    (Node 6 Empty Empty) Empty)
{-
ghci> sum_nodes sumTREE
24
5+2+1+3+7+6 = 24
-}
-- Produce a list of the node values in the tree via an inorder traversal
-- Feel free to use concatenation (++)
inorder :: Tree a -> [a]
inorder Empty = []
inorder (Node value left right) = inorder left ++ [value] ++ inorder right
{-
ghci> inorder sumTREE
[1,2,3,5,6,7]
-}

-- 4. A different, leaf-based tree data structure
data Tree2 a = Leaf a | Node2 a (Tree2 a) (Tree2 a) deriving Show

-- Count the number of elements in the tree (leaf or node)
num_elts :: Tree2 a -> Int
num_elts (Leaf _) = 1
num_elts (Node2 _ left right) = 1 + num_elts left + num_elts right
leafTREE = Node2 5 (Leaf 3) (Node2 10 (Leaf 4) (Leaf 11))
{-
ghci> num_elts leafTREE
5
-}

-- Add up all the elements in a tree of numbers
sum_nodes2 :: Num a => Tree2 a -> a
sum_nodes2 (Leaf a) = a
sum_nodes2 (Node2 a left right) = a + sum_nodes2 left + sum_nodes2 right
{-
ghci> sum_nodes2 leafTREE
33
5+3+10+4+11=33
-}

-- Produce a list of the elements in the tree via an inorder traversal
-- Again, feel free to use concatenation (++)
inorder2 :: Tree2 a -> [a]
inorder2 (Leaf val) = [val]
inorder2 (Node2 val left right) = inorder2 left ++ [val] ++ inorder2 right
{-
ghci> inorder2 leafTREE
[3,5,4,10,11]
-}
-- Convert a Tree2 into an equivalent Tree1 (with the same elements)
conv21 :: Tree2 a -> Tree a
conv21 (Leaf x) = Node x Empty Empty
conv21 (Node2 x left right) = Node x (conv21 left) (conv21 right)
{-
ghci> conv21 leafTREE
Node 5 (Node 3 Empty Empty) (Node 10 
        (Node 4 Empty Empty) (Node 11 Empty Empty))
-}

---- Part 2: Iteration and Accumulators ----------------


-- Both toBList and fromBList from Part 1 Problem 2 are O(n^2) operations.
-- Reimplement them using iterative helper functions (locally defined using
-- a 'where' clause) with accumulators to make them O(n)
toBList' :: [a] -> BList a
toBList' xs = fastBList xs Nil where
    fastBList [] acc = acc
    fastBList (x:xs) acc = fastBList xs (Snoc acc x)
{-
ghci> toBList' [1, 2, 3, 4]
Snoc (Snoc (Snoc (Snoc Nil 1) 2) 3) 4
-}
fromBList' :: BList a -> [a]
fromBList' blist = helper blist []
    where
    helper Nil acc = acc
    helper (Snoc rest x) acc = helper rest (x:acc)
{-
ghci> let bListUno = Snoc (Snoc (Snoc Nil 3) 2) 1
ghci> fromBList' bListUno
[3,2,1]
-}

-- Even tree functions that do multiple recursive calls can be rewritten
-- iteratively using lists of trees and an accumulator. For example,
sum_nodes' :: Num a => Tree a -> a
sum_nodes' t = sum_nodes_it [t] 0 where
  sum_nodes_it :: Num a => [Tree a] -> a -> a
  sum_nodes_it [] a = a
  sum_nodes_it (Empty:ts) a = sum_nodes_it ts a
  sum_nodes_it (Node n t1 t2:ts) a = sum_nodes_it (t1:t2:ts) (n+a)

-- Use the same technique to convert num_empties, num_nodes, and sum_nodes2
-- into iterative functions with accumulators

num_empties' :: Tree a -> Int
num_empties' t = num_empties_it [t] 0 where
  num_empties_it :: [Tree a] -> Int -> Int
  num_empties_it [] a = a
  num_empties_it (Empty:ts) a = num_empties_it ts (a+1)
  num_empties_it (Node _ t1 t2:ts) a = num_empties_it (t1:t2:ts) a
{-
ghci> let treeTRES = Node 1 (Node 2 Empty Empty) (Node 3 Empty Empty)
ghci> num_empties' treeTRES
4
-}
num_nodes' :: Tree a -> Int
num_nodes' = undefined

sum_nodes2' :: Num a => Tree2 a -> a
sum_nodes2' = undefined

-- Use the technique once more to rewrite inorder2 so it avoids doing any
-- concatenations, using only (:).
-- Hint 1: (:) produces lists from back to front, so you should do the same.
-- Hint 2: You may need to get creative with your lists of trees to get the
-- right output.
inorder2' :: Tree2 a -> [a]
inorder2'= undefined




---- Part 3: Higher-order functions ----------------

-- The functions map, all, any, filter, dropWhile, takeWhile, and break
-- from the Prelude are all higher-order functions. Reimplement them here
-- as list recursions. break should process each element of the list at
-- most once. All functions should produce the same output as the originals.

my_map :: (a -> b) -> [a] -> [b]
my_map _ []  = []
my_map f (x:xs) = f x : my_map f xs
{-
ghci> my_map (+1) [1,2,3,4]
[2,3,4,5]
ghci> my_map (^2) [1,2,3,4]
[1,4,9,16]
-}

my_all :: (a -> Bool) -> [a] -> Bool
my_all _ [] = True
my_all f (x:xs) = f x && my_all f xs
{-
ghci> my_all even [2,4,6,8]
True
ghci> my_all even [2,4,5,8]
False
-}

my_any :: (a -> Bool) -> [a] -> Bool
my_any _ []     = False
my_any f (x:xs) = f x || my_any f xs
{-
ghci> my_any even [1,2,3,4,5]
True
ghci> my_any (>10) [1,2,3,4,5]
False
-}

my_filter :: (a -> Bool) -> [a] -> [a]
my_filter _ [] = []
my_filter pred (x:xs)
    | pred x    = x : my_filter pred xs
    | otherwise = my_filter pred xs
    {-
    ghci> my_filter even [1,2,3,4,5,6]
[2,4,6]
ghci> my_filter (>3) [1,2,3,3,4,2,6]
[4,6]

    -}

my_dropWhile :: (a -> Bool) -> [a] -> [a]
my_dropWhile _ [] = []
my_dropWhile pred (x:xs)
    | pred x = my_dropWhile pred xs
    | otherwise = x:xs
    {-
    ghci> my_dropWhile (<4) [1,2,3,4,5]
[4,5]
ghci> my_dropWhile (/= 'a') "stringawhile"
"awhile"
    -}

my_takeWhile :: (a -> Bool) -> [a] -> [a]
my_takeWhile _ [] = []
my_takeWhile pred (x:xs)
        | pred x = x : my_takeWhile pred xs
        | otherwise = []
{-
ghci> my_takeWhile (> 0) [-1,-2,-3,4,1,-1,2,3,4,5]
[]
ghci> my_takeWhile odd [3,5,1,6,3,4,7]
[3,5,1]
-}
my_break :: (a -> Bool) -> [a] -> ([a], [a])
my_break _ [] = ([], [])
my_break pred (x:xs)
    | pred x    = ([], x:xs)
    | otherwise = let (before, after) = my_break pred xs
                  in (x:before, after)
{-
ghci> my_break (<6) [7,8,6,9,5,2,6,3,5]
([7,8,6,9],[5,2,6,3,5])
ghci> my_break (=='a') "stringawhile"
("string","awhile")
-}

-- Implement the Prelude functions and, or, concat using foldr

my_and :: [Bool] -> Bool
my_and = foldr (&&) True
{-
ghci> my_and [True, True, True]
True
ghci> my_and [True, True, False]
False
-}

my_or :: [Bool] -> Bool
my_or = foldr (||) False 
--foldr goes through the entire list
--and starts as false. Since it's an or function
--a single true will return true. 
{-
ghci> my_or [True, False, False]
True
ghci> my_or [False, False, False]
False
-}

my_concat :: [[a]] -> [a]
my_concat = foldr (++) []
{-
ghci> my_concat [[1,6], [9,5], [113], [16]]
[1,6,9,5,113,16]
ghci> my_concat []
[]
ghci> my_concat [["heave ", "ho"], [" Land"], []]
["heave ","ho"," Land"]
-}

-- Implement the Prelude functions sum, product, reverse using foldl

my_sum :: Num a => [a] -> a
my_sum = foldl (+) 0
{-
ghci> my_sum [1,2,3,4,5]
15
ghci> my_sum [1,2,-3,2,7,5]
14
ghci> my_sum []
0
-}

my_product :: Num a => [a] -> a
my_product = foldl (*) 1
{-
ghci> my_product [1,2,3,4,5]
120
ghci> my_product [1,-1,2,3,4,5,3]
-360
-}
my_reverse :: [a] -> [a]
my_reverse = foldl (flip (:)) []
{-
ghci> my_reverse [1,2,3,4,5,6,7,8,9,0]
[0,9,8,7,6,5,4,3,2,1]
-}



---- Part 4: Extra Credit ----------------

-- Convert a Tree into an equivalent Tree2, IF POSSIBLE. That is, given t1,
-- return t2 such that conv21 t2 = t1, if it exists. (In math, this is called
-- the "inverse image" of the function conv21.)  Thus, if conv21 t2 = t1, then
-- it should be that conv 12 t1 = Just t2. If there does not exist such a t2,
-- then conv12 t1 = Nothing. Do some examples on paper first so you can get a
-- sense of when this conversion is possible.
conv12 :: Tree a -> Maybe (Tree2 a)
conv12 = undefined


-- Binary Search Trees. Determine, by making only ONE PASS through a tree,
-- whether or not it's a Binary Search Tree, which means that for every
-- Node a t1 t2 in the tree, every element in t1 is strictly less than a and
-- every element in t2 is strictly greater than a. Complete this for both
-- Tree a and Tree2 a.

-- Hint: use a helper function that keeps track of the range of allowable
-- element values as you descend through the tree. For this, use the following
-- extended integers, which add negative and positvie infintiies to Int:

data ExtInt = NegInf | Fin Int | PosInf deriving Eq

instance Show ExtInt where
  show NegInf     = "-oo"
  show (Fin n) = show n
  show PosInf     = "+oo"

instance Ord ExtInt where
  compare NegInf  NegInf  = EQ
  compare NegInf  _       = LT
  compare (Fin n) (Fin m) = compare n m
  compare (Fin n) PosInf  = LT
  compare PosInf  PosInf  = EQ
  compare _       _       = GT
  -- Note: defining compare automatically defines <, <=, >, >=, ==, /=
  
bst :: Tree Int -> Bool
bst = undefined
    
bst2 :: Tree2 Int -> Bool
bst2 = undefined

