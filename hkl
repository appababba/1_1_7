% Merge sort 
deal([], [], []).
deal([X], [X], []).
deal([X, Y| Rest], [X|Xs], [Y|Ys]) :-
    deal(Rest, Xs, Ys).

merge([], Ys, Ys).
merge(Xs, [], Xs).
merge([X|Xs], [Y|Ys], [X|Zs]) :-
    X =< Y,
    merge(Xs, [Y|Ys], Zs).
merge([X|Xs], [Y|Ys], [Y|Zs]) :-
    X > Y,
    merge([X|Xs], Ys, Zs).

ms([], []).
ms([X], [X]).
ms(Xs, Sorted) :-
    deal(Xs, Left, Right),
    ms(Left, SortedLeft),
    ms(Right, SortedRight),
    merge(SortedLeft, SortedRight, Sorted).
% ms([5,3,8,6,2], Sorted).
% Sorted = [2, 3, 5, 6, 8]

% 2 A backward list data structure
% Back Lists: Lists where elements are added to the back
nil(nil).
snoc(BList, Elem, snoc(BList, Elem)).

% Add an element to the beginning of a BList, like (:) does
% toBList([1,2,3], BList).
% BList = snoc(snoc(snoc(nil,1),2),3)
cons(Elem, nil, snoc(nil, Elem)).
cons(Elem, snoc(Tail, H), snoc(ConsedTail, H)) :-
    cons(Elem, Tail, ConsedTail).

% Convert a usual list into a BList
% cons(1, snoc(snoc(nil,2),3), Result).
% Result = snoc(snoc(snoc(nil,1),2),3)
toBList([], nil).
toBList([H|T], BList) :-
    toBList(T, TempBList),
    cons(H, TempBList, BList).

% Add an element to the end of an ordinary list
% snoc_list([1,2], 3, Result).
% Result = [1, 2, 3]
snoc_list(List, Elem, Result) :-
    append(List, [Elem], Result).

% Convert a BList into an ordinary list
% fromBList(snoc(snoc(snoc(nil,1),2),3), List).
% List = [1, 2, 3]
fromBList(nil, []).
fromBList(snoc(Tail, H), List) :-
    fromBList(Tail, TempList),
    snoc_list(TempList, H, List).


% 3 A binary tree data structure 
num_empties(empty, 1).
num_empties(node(_, Left, Right), N) :-
    num_empties(Left, N1),
    num_empties(Right, N2),
    N is N1 + N2.

num_nodes(empty, 0).
num_nodes(node(_, Left, Right), N) :-
    num_nodes(Left, N1),
    num_nodes(Right, N2),
    N is N1 + N2 + 1.

insert_left(Value, empty, node(Value, empty, empty)).
insert_left(Value, node(Root, empty, Right), node(Root, node(Value, empty, empty), Right)).
insert_left(Value, node(Root, Left, Right), node(Root, NewLeft, Right)) :-
    insert_left(Value, Left, NewLeft).

insert_right(Value, empty, node(Value, empty, empty)).
insert_right(Value, node(Root, Left, empty), node(Root, Left, node(Value, empty, empty))).
insert_right(Value, node(Root, Left, Right), node(Root, Left, NewRight)) :-
    insert_right(Value, Right, NewRight).

sum_nodes(empty, 0).
sum_nodes(node(Value, Left, Right), Sum) :-
    sum_nodes(Left, SumL),
    sum_nodes(Right, SumR),
    Sum is Value + SumL + SumR.

inorder(empty, []).
inorder(node(Value, Left, Right), List) :-
    inorder(Left, ListL),
    inorder(Right, ListR),
    append(ListL, [Value|ListR], List).

% num_empties(node(1, node(2, empty, empty), node(3, empty, empty)), N).
% N = 4
% num_nodes(node(1, node(2, empty, empty), node(3, empty, empty)), N).
% N = 3
% insert_left(0, node(1, node(2, empty, empty), node(3, empty, empty)), NewTree).
% NewTree = node(1,node(2,node(0,empty,empty),empty),node(3,empty,empty))
% sum_nodes(node(1, node(2, empty, empty), node(3, empty, empty)), Sum).
% Sum = 6
% inorder(node(1, node(2, empty, empty), node(3, empty, empty)), List).
% List = [2, 1, 3]



leaf/1.
node2/3.
% num_elts(node2(1, leaf(2), node2(3, leaf(4), leaf(5))), N).
% N = 5
num_elts(leaf(_), 1).
num_elts(node2(_, Left, Right), N) :-
    num_elts(Left, NL),
    num_elts(Right, NR),
    N is NL + NR + 1.

% sum_nodes2(node2(1, leaf(2), node2(3, leaf(4), leaf(5))), Sum).
% Sum = 15
sum_nodes2(leaf(Value), Value).
sum_nodes2(node2(Value, Left, Right), Sum) :-
    sum_nodes2(Left, SL),
    sum_nodes2(Right, SR),
    Sum is SL + SR + Value.

% inorder2(node2(1, leaf(2), node2(3, leaf(4), leaf(5))), List).
% List = [2, 1, 4, 3, 5]
inorder2(leaf(Value), [Value]).
inorder2(node2(Value, Left, Right), List) :-
    inorder2(Left, LList),
    inorder2(Right, RList),
    append(LList, [Value|RList], List).

% conv21(node2(1, leaf(2), node2(3, leaf(4), leaf(5))), Tree1).
% Tree1 = node(1,node(2,empty,empty),node(3,node(4,empty,empty),
% node(5,empty,empty)))
conv21(leaf(Value), node(Value, empty, empty)).
conv21(node2(Value, Left2, Right2), node(Value, Left1, Right1)) :-
    conv21(Left2, Left1),
    conv21(Right2, Right1).

% Part 2
% to_blist([1,2,3,4], BListResult).
% BListResult = snoc(snoc(snoc(snoc(nil,1),2),3),4)
to_blist(List, BList) :- to_blist_acc(List, nil, BList).
to_blist_acc([], Acc, Acc).
to_blist_acc([H|T], Acc, BList) :- to_blist_acc(T, snoc(Acc, H), BList).

% fromBList(snoc(snoc(snoc(nil,1),2),3), ListResult).
% ListResult = [1, 2, 3]
fromBList(BList, List) :- fromBList_acc(BList, [], List).
fromBList_acc(nil, Acc, Acc).
fromBList_acc(snoc(Tail, Head), Acc, List) :- fromBList_acc(Tail, [Head|Acc], List).


% sum_nodes
% sum_nodes(node(5, node(3, empty, empty), node(2, empty, node(4, empty, empty))), SumResult).
% SumResult = 14
% sum_nodes
sum_nodes(Tree, Sum) :- sum_nodes_it([Tree], 0, Sum).

sum_nodes_it([], A, A).
sum_nodes_it([empty|Ts], A, Sum) :- sum_nodes_it(Ts, A, Sum).
sum_nodes_it([node(N, Left, Right)|Ts], A, Sum) :- 
    NewA is A + N,
    sum_nodes_it([Left, Right|Ts], NewA, Sum).


% num_empties(node(5, node(3, empty, empty), node(7, empty, empty)), Count).
% Count = 4
num_empties(Tree, Count) :- num_empties_it([Tree], 0, Count).

% num_nodes(node(5, node(3, empty, empty), node(7, empty, empty)), Count).
% Count = 3
testTree(node(4, node(2, node(1, empty, empty), node(3, empty, empty)), node(5, empty, empty))).
testTree(T), num_nodes(T, Count).
% Count = 5,
% T = node(4,node(2,node(1,empty,empty),node(3,empty,empty)),node(5,empty,empty))
% num_nodes(Tree, Count) :- num_nodes_it([Tree], 0, Count).

num_nodes_it([], A, A).
num_nodes_it([empty|Ts], A, Count) :- num_nodes_it(Ts, A, Count).
num_nodes_it([node(_, Left, Right)|Ts], A, Count) :- 
    NewA is A + 1, 
    num_nodes_it([Left, Right|Ts], NewA, Count).

testTree(T), sum_nodes2(T, Sum).
% Sum = 15,
% T = node(4,node(2,node(1,empty,empty),node(3,empty,empty)),node(5,empty,empty))
sum_nodes2(Tree, Sum) :- sum_nodes_it([Tree], 0, Sum).


inorder2(Tree, List) :- inorder2_it([Tree], [], List).
inorder2_it([], A, A).
inorder2_it([empty|Ts], A, List) :- inorder2_it(Ts, A, List).
inorder2_it([node(N, Left, Right)|Ts], A, List) :- 
    inorder2_it([Left, node(N, empty, empty), Right|Ts], A, List).
inorder2_it([node(N, empty, empty)|Ts], A, List) :- inorder2_it(Ts, [N|A], List).


% part 4
negInf.
posInf.
fin(N) :- integer(N).


ext_between(negInf, _, fin(N)) :- integer(N).
ext_between(_, posInf, fin(N)) :- integer(N).
ext_between(fin(N), fin(M), fin(K)) :- N =< K, K =< M.
ext_between(negInf, posInf, _).

bst(empty, _, _).

bst(node(Value, Left, Right), Min, Max) :-
    ext_between(Min, Max, fin(Value)),   
    bst(Left, Min, fin(Value)),       
    bst(Right, fin(Value), Max).      

is_bst(Tree) :-
    bst(Tree, negInf, posInf).

% is_bst(node(10, node(5, empty, empty), node(15, empty, empty))).
%1true
%2true
%3true
